from typing import Optional, Tuple
from dataclasses import dataclass
from jaxtyping import PyTree
import jax
import jax.tree_util as jtu
from ..utils import filter_tree_map, PsiArray


@jtu.register_pytree_node_class
@dataclass(frozen=True)
class Samples:
    r"""
    The samples generated by the sampler.
    This class is jittable, and there are 3 attributes.

    spins:
        The spin configurations

    psi:
        The wave_function of the spin configurations

    reweight_factor:
        According to

        .. math::

            \left< x \right>_p = \frac{\sum_s p_s x_s}{\sum_s p_s}
            = \frac{\sum_s q_s x_s p_s/q_s}{\sum_s q_s p_s/q_s}
            = \frac{\left< x p/q \right>_q}{\left< p/q \right>_q},

        the expectation value with probability distribution p can be computed from
        samples with a different probability distribution q.

        The reweighting factor is defined as

        .. math::
            r_s = \frac{p_s/q_s}{\left< p/q \right>_q},

        so that :math:`\left< x \right>_p = \left< r x \right>_q`.

        Usually, :math:`p_s = |\psi(s)|^2` is the target probability,
        and :math:`q_s` can be chosen as :math:`|\psi(s)|^n` or computed from a
        helper neural network. In the former case,
        :math:`r_s = \frac{|\psi_s|^{2-n}}{\left< |\psi|^{2-n} \right>}`

    state_internal:
        The internal status of samples for the forward pass.
    """
    spins: jax.Array
    psi: PsiArray
    state_internal: PyTree = None
    reweight_factor: Optional[jax.Array] = None

    @property
    def nsamples(self) -> int:
        return self.spins.shape[0]

    def tree_flatten(self) -> Tuple:
        children = (
            self.spins,
            self.psi,
            self.state_internal,
            self.reweight_factor,
        )
        aux_data = None
        return (children, aux_data)

    @classmethod
    def tree_unflatten(cls, aux_data, children):
        return cls(*children)

    def __getitem__(self, idx):
        f = lambda x: x[idx]
        return filter_tree_map(f, self)
